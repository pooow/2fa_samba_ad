---
- name: Generate CA
  hosts: sp8_srv_20211221
  remote_user: user

  vars:
    extension_file_KDC: ./extension_file_KDC
    samba_2fa_id_token: 7947
    samba_2fa_label_rutoken: 2fa_samba_ad
    gen_key_token: no
    extension_file_user: ./extension_file_user

  tasks:
    - name: Remove demoCA
      shell: rm -rf demoCA

    - name: Create demoCA folder
      shell: mkdir -pv demoCA/{certs,newcerts,private}
    - shell: touch demoCA/index.txt
    - shell: echo "01" > demoCA/serial

    - name: Create CA key
      shell: | 
        openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 \
        -outform PEM -out demoCA/private/cakey.pem

    - name: Create CA cert
      shell: |
        openssl req -new -x509 -key demoCA/private/cakey.pem -out demoCA/certs/cacert.pem \
        -extensions v3_ca -days +3650 -outform PEM \
        -subj "/C=RU/ST=Moscow/O=Basealt/CN=CA"

    - name: Create KDC key
      shell: openssl genrsa -out demoCA/private/dc-key.pem 2048

    - name: Create KDC req
      shell: |
        openssl req -new -out demoCA/dc-req.csr -key demoCA/private/dc-key.pem \
        -subj "/C=RU/ST=Moscow/O=Basealt/CN=dc2"

    - name: Create (copy) extension file for KDC cert
      copy: src={{ extension_file_KDC }} dest=demoCA/{{ extension_file_KDC }}


    - name: Create (copy) extension file for user cert
      copy: src={{ extension_file_user }} dest=demoCA/{{ extension_file_user }}


    - name: Create KDC cert
      ansible.builtin.shell: |
        openssl ca -batch -in demoCA/dc-req.csr -out demoCA/certs/dc-cert.pem \
        -cert demoCA/certs/cacert.pem -extfile demoCA/{{ extension_file_KDC }} \
        -extensions kdc_cert

    - name: Check if file repo is present
      ansible.builtin.shell: ls /mnt/space
      register: repo_dir

    - name: Add NFS repo
      become: true
      ansible.builtin.shell: mount 10.4.0.3:/space /mnt/space
      when: repo_dir.stdout == ""


    - name: install pkg for tokens
      become: true
      apt_rpm:
        pkg:
          - opensc
          - librtpkcs11ecp
          - pcsc-tools
          - gnutls-utils
          - libp11                    # for openssl engine
        state: present
        update_cache: yes

    - name: Check polkit for pcsc
      ansible.builtin.shell: pcsc_scan -r
      register: pcsc_scan
      ignore_errors: yes

    - name: Permit pcsc for all. Attention on colon in stdout. Use quote the entire line.
      become: true
      ansible.builtin.replace:
        path: /usr/share/polkit-1/actions/org.debian.pcsc-lite.policy
        regexp: '>no<'
        replace: '>yes<'
        backup: yes
      when: pcsc_scan.stderr is regex("SCardEstablishContext.*RPC transport error")


    - name: Enable pcscd.socket
      become: true
      ansible.builtin.systemd:
        state: started
        name: pcscd.socket

    - name: Check cert on rutoken
      ansible.builtin.shell: pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so --list-object --type cert
      register: cert_on_rutoken

    - name: Delete old cert on rutoken
      ansible.builtin.shell: |
        pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so -p 12345678 -l \
        --delete-object --type cert --id {{ samba_2fa_id_token }}
      when: "samba_2fa_label_rutoken in cert_on_rutoken.stdout"


    - name: Check key on rutoken
      ansible.builtin.shell: pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so --list-object --type pubkey
      register: pubkey_on_rutoken

    - name: Delete old keys on rutoken
      ansible.builtin.shell: |
        p11tool --provider /usr/lib64/librtpkcs11ecp.so --login --set-pin=12345678 --batch \
        --delete pkcs11:object={{ samba_2fa_label_rutoken }}
      when: (samba_2fa_label_rutoken in pubkey_on_rutoken.stdout) and
            (gen_key_token == "yes")


    - name: Check key on rutoken 2
      ansible.builtin.shell: pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so --list-object --type pubkey
      register: pubkey_on_rutoken2

    - name: Generate keys for users on token
      ansible.builtin.shell:
        pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so -p 12345678 -l \
        --keypairgen --key-type rsa:2048 --id {{ samba_2fa_id_token }} \
        --label {{ samba_2fa_label_rutoken }}
      when: "samba_2fa_label_rutoken not in pubkey_on_rutoken2.stdout"


    - name: Openssl engine pkcs11 setup 1
      become: yes
      ansible.builtin.lineinfile: 
        path: /etc/openssl/openssl.cnf
        state: present
        insertbefore: BOF
        line: openssl_conf = openssl_def

    - name: Openssl engine pkcs11 setup 2
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/openssl/openssl.cnf
        state: present
        insertafter: EOF
        block: |
          [ openssl_def ]
                  engines = engine_section
          [ engine_section ]
                  pkcs11 = pkcs11_section
          [ pkcs11_section ]
                  dynamic_path = /usr/lib64/openssl/engines-1.1/pkcs11.so
                  MODULE_PATH = /usr/lib64/pkcs11/librtpkcs11ecp.so
        backup: yes

            
    - name: Create user req
      shell: |
        openssl req -new -out demoCA/2fa_user.csr -keyform engine -engine pkcs11 \
        -key pkcs11:object={{ samba_2fa_label_rutoken }} -passin pass:12345678 \
        -subj "/C=RU/ST=Moscow/O=Basealt/CN=2fa_user"

    - name: Issue cert for users
      ansible.builtin.shell: |
        openssl ca -batch -in demoCA/2fa_user.csr -out demoCA/certs/2fa_user.pem \
        -cert demoCA/certs/cacert.pem -extfile demoCA/{{ extension_file_user }} \
        -extensions kdc_user

    - name: Create cert req for users
      ansible.builtin.shell: echo

    - name: Issue cert for users
      ansible.builtin.shell: echo

    - name: Copy cert for user on token
      ansible.builtin.shell: |
        pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so -p 12345678 -l \
        --write-object ./demoCA/certs/2fa_user.pem --type cert \
        --id {{ samba_2fa_id_token }} --label {{ samba_2fa_label_rutoken }}

    - name: Stop Samba. For copy certs and keys.
      become: yes
      ansible.builtin.systemd:
        state: stopped
        name: samba.service

    - name: Remove old certs and keys from Samba
      become: yes
      ansible.builtin.file:
        path: /var/lib/samba/private/tls/
        state: absent

    - name: Create tls folder from Samba
      become: yes
      ansible.builtin.file:
        path: /var/lib/samba/private/tls
        state: directory

    - name: Copy CA cert to samba
      become: yes
      ansible.builtin.copy:
        src: demoCA/certs/cacert.pem
        dest: /var/lib/samba/private/tls/cacert.pem
        remote_src: yes
          
    - name: Copy DC key to samba
      become: yes
      ansible.builtin.copy:
        src: demoCA/private/dc-key.pem
        dest: /var/lib/samba/private/tls/dc-key.pem
        mode: 0600
        remote_src: yes

    - name: Copy DC cert to samba
      become: yes
      ansible.builtin.copy:
        src: demoCA/certs/dc-cert.pem
        dest: /var/lib/samba/private/tls/dc-cert.pem
        remote_src: yes

    - name: Add TLS to smb.conf
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/samba/smb.conf
        state: present
        insertafter: "use rfc2307"
        block: |
                  tls enabled = yes
                  tls certfile = /var/lib/samba/private/tls/dc-cert.pem
                  tls keyfile = /var/lib/samba/private/tls/dc-key.pem
                  tls cafile = /var/lib/samba/private/tls/cacert.pem
        backup: yes


    - name: Add pkinit to kerberos on samba AD 1
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/krb5.conf
        state: present
        insertafter: "dns_lookup_kdc"
        line: '         pkinit_anchors = FILE:/var/lib/samba/private/tls/cacert.pem'

    - name: Add pkinit to kerberos on samba AD 2
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/krb5.conf
        state: present
        insertafter: EOF
        block: |
          [kdc]
          enable-pkinit = yes
          pkinit_identity = FILE:/var/lib/samba/private/tls/dc-cert.pem,/var/lib/samba/private/tls/dc-key.pem
          pkinit_anchors = FILE:/var/lib/samba/private/tls/cacert.pem
          pkinit_principal_in_certificate = yes
          pkinit_win2k_require_binding = yes
        backup: yes

    - name: Reload Samba after edit krb5.conf.
      become: yes
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: samba.service
          
    - name: Check Samba AD user exist
      become: yes
      ansible.builtin.shell: |
        samba-tool user list
      register: samba_user_check_exist

    - name: Create Samba AD user
      become: yes
      ansible.builtin.shell: |
        samba-tool user create 2fa_user 'Pa$$word' --given-name='2fa_user'
      when: not samba_user_check_exist.stdout is regex("2fa_user")

    - name: Copy CA cert to ansible host
      ansible.builtin.fetch:
        src: /home/user/demoCA/certs/cacert.pem
        dest: /tmp/prefix--cacert.pem
        flat: yes        

- name: RUN on client
  hosts: sp8_ws_20211221
  remote_user: user

  vars:
    extension_file_KDC: ./extension_file_KDC
    samba_2fa_id_token: 7947
    samba_2fa_label_rutoken: 2fa_samba_ad
    gen_key_token: no
    extension_file_user: ./extension_file_user

  tasks:
          
    - name: Copy CA cert to member domain host
      become: yes
      ansible.builtin.copy:
        src: /tmp/prefix--cacert.pem
        dest: /etc/pki/tls/certs/cacert.pem

    - name: Add pkinit to krb5.conf on client host
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/krb5.conf
        state: present
        insertafter: "default_ccache_name"
        block: |
          pkinit_anchors = DIR:/etc/pki/tls/certs/
          pkinit_identities = PKCS11:librtpkcs11ecp.so:certid=7947
          canonicalize = True
        backup: yes
          
    - name: Add cert auth to sssd.conf on client host 1
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/sssd/sssd.conf
        state: present
        insertafter: '\[pam\]'
        block: |
          pam_cert_auth = True
          pam_p11_allowed_services = +mate-screensaver, +lightdm
          pam_cert_db_path = /etc/pki/tls/certs/cacert.pem
        marker: "# Add cert auth to sssd.conf on client host 1"
        backup: yes

    - name: Add cert auth to sssd.conf on client host 2
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/sssd/sssd.conf
        state: present
        insertafter: EOF
        block: |
          [certmap/test2.alt/adcerts]
          maprule = (|(userPrincipal={subject_principal})(samAccountName={subject_principal.short_name}))
        marker: "# Add cert auth to sssd.conf on client host 2"
        backup: yes
          
 
    - name: Reload sssd after edit sssd.conf
      become: yes
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: sssd.service
          

    - meta: end_play


    - name: Generate cert for users
      ansible.builtin.shell: echo

      #    - name: Get objects on rutoken
      #      ansible.builtin.shell: pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so --list-object
      #      register: objects_on_rutoken
      #
      #    - name: pubkey pattern
      #      set_fact: pattern_cert="pubkey\\n\s.*label:\s.*"
      #
      #    - name: pubkey pattern 2
      #      set_fact:
      #        pubkey_and_label: "{{ pattern_cert }}{{ samba_2fa_label_rutoken }}"
      #
      #    - name: Delete old
      #      ansible.builtin.shell: echo AAA
      #      when: objects_on_rutoken.stdout is regex(pubkey_and_label)
      #
      #
      #    - name: Debug version
      #      debug:
      #        msg: "{{ objects_on_rutoken.stdout | regex_search(version_re, '\\1', multiline=true) | first }}"
      #      vars:
      #        version_re: '{{ pattern_cert }}{{ samba_2fa_label_rutoken }}'
      #
      #
      #
      #    - meta: end_play
      #
      #    - name: Generate key on rutoken
      #      ansible.builtin.shell: |
      #        pkcs11-tool --module /usr/lib64/librtpkcs11ecp.so -p 12345678 -l \
      #        --keypairgen --key-type RSA:1024 --id {{ samba_2fa_id_token }} \
      #        --label {{ samba_2fa_label_rutoken }}

        # p11tool --provider /usr/lib64/librtpkcs11ecp.so --login --set-pin=12345678 --delete "pkcs11:object=samba_2fa_label_rutoken" --batch
